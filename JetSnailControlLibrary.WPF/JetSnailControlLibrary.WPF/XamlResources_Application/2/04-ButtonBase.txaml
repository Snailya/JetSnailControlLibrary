<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:JetSnailControlLibrary.WPF">

  <!-- Base Button -->
  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Control}}">
    <Setter Property="FontWeight" Value="{StaticResource Button.FontWeight}" />
    <Setter Property="FontSize" Value="{StaticResource Button.FontSize}" />

    <Setter Property="MinWidth" Value="64" />
    <Setter Property="Height" Value="36" />
    <Setter Property="Padding" Value="16 0" />

    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <local:RippleEffectDecorator CornerRadius="{TemplateBinding Border.CornerRadius}"
                                       ColorTheme="{TemplateBinding local:RippleEffectDecorator.ColorTheme}">
            <Grid>
              <Border x:Name="PART_Root" Panel.ZIndex="0"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}"
                      CornerRadius="{TemplateBinding Border.CornerRadius}" />

              <TextBlock Margin="{TemplateBinding Padding}" Panel.ZIndex="99"
                         Foreground="{TemplateBinding Foreground}"
                         Focusable="False"
                         Text="{TemplateBinding Content}"
                         FontFamily="{TemplateBinding FontFamily}"
                         FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}"
                         HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                         VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Grid>
          </local:RippleEffectDecorator>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Text Button (low emphasis) -->
  <Style x:Key="TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="8 0" />
  </Style>

  <!-- Outlined Button (medium emphasis) -->
  <Style x:Key="OutlinedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="BorderBrush" Value="{StaticResource BorderOnSurfaceBrush}" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>

  <!-- Contained Button (high emphasis) -->
  <Style x:Key="ContainedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />

    <Setter Property="local:RippleEffectDecorator.ColorTheme" Value="OnPrimary" />
  </Style>

  <!-- IconText button -->
  <Style x:Key="IconTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="12 0 16 0" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <local:RippleEffectDecorator ColorTheme="{TemplateBinding local:RippleEffectDecorator.ColorTheme}">
            <Grid>
              <Border x:Name="PART_Root" Panel.ZIndex="0"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Background="{TemplateBinding Background}" />
              <Grid Margin="{TemplateBinding Padding}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="18" />
                  <ColumnDefinition Width="8" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0"
                           Foreground="{TemplateBinding Foreground}"
                           Focusable="False"
                           Text="{TemplateBinding Tag}"
                           FontFamily="{StaticResource FontAwesome}"
                           FontWeight="{TemplateBinding FontWeight}"
                           FontSize="{TemplateBinding FontSize}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                <TextBlock Grid.Column="2"
                           Foreground="{TemplateBinding Foreground}"
                           Focusable="False"
                           Text="{TemplateBinding Content}"
                           FontFamily="{TemplateBinding FontFamily}"
                           FontWeight="{TemplateBinding FontWeight}"
                           FontSize="{TemplateBinding FontSize}"
                           HorizontalAlignment="Left"
                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
              </Grid>
            </Grid>
          </local:RippleEffectDecorator>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Outlined IconTextButton (medium emphasis) -->
  <Style x:Key="OutlinedIconTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource IconTextButton}">
    <Setter Property="BorderBrush" Value="{StaticResource BorderOnSurfaceBrush}" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>

  <!-- Contained Button (high emphasis) -->
  <Style x:Key="ContainedIconTextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource IconTextButton}">
    <Setter Property="BorderBrush" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="{StaticResource OnPrimaryBrush}" />

    <Setter Property="local:RippleEffectDecorator.ColorTheme" Value="OnPrimary" />
  </Style>

  <!-- Icon button -->
  <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight}" />
  </Style>

  <!-- +/- icon toggle button -->
  <Style x:Key="PlusMinusToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border>
            <TextBlock x:Name="Icon" FontFamily="{StaticResource FontAwesome}" Text="&#xf055;"
                       VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Icon" Property="Text" Value="&#xf056;" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <!-- angle toggle button -->
  <Style x:Key="AngleToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border>
            <TextBlock x:Name="Icon" FontFamily="{StaticResource FontAwesome}" Text="&#xf107;"
                       VerticalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Icon" Property="Text" Value="&#xf106;" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>